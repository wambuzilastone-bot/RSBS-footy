// api/fixtures.js
import axios from 'axios';
import cheerio from 'cheerio';

export default async function handler(req, res) {
  try {
    if (req.method !== "GET") {
      return res.status(405).json({ error: "Method Not Allowed" });
    }

    const country = (req.query.country || "").toLowerCase();
    const league = (req.query.league || "").toLowerCase();

    if (!country || !league) {
      return res.status(400).json({ error: "Country and league are required" });
    }

    const fixturesUrl = `https://www.betexplorer.com/soccer/${country}/${league}/fixtures/`;
    const tablesUrlCandidates = [
      `https://www.betexplorer.com/soccer/${country}/${league}/tables/`,
      `https://www.betexplorer.com/soccer/${country}/${league}/standings/`,
      `https://www.betexplorer.com/soccer/${country}/${league}/table/`
    ];

    const http = axios.create({
      headers: {
        'User-Agent':
          'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 ' +
          '(KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36',
        'Accept-Language': 'en-US,en;q=0.9',
        Accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
      },
      timeout: 20000
    });

    // --- Fetch fixtures ---
    const fxRes = await http.get(fixturesUrl);
    const $fx = cheerio.load(fxRes.data);
    const fixtures = [];

    $fx('table.table-main tr').each((_, tr) => {
      const aTexts = [];
      $fx(tr).find('a').each((_, a) => {
        const t = $fx(a).text().trim();
        if (t && /[A-Za-z]/.test(t)) aTexts.push(t);
      });
      if (aTexts.length >= 2) {
        fixtures.push({ home: aTexts[0], away: aTexts[1] });
      }
    });

    // --- Fetch standings ---
    let standingsHtml = null;
    for (const url of tablesUrlCandidates) {
      try {
        const r = await http.get(url);
        if (r.status === 200 && r.data) {
          standingsHtml = r.data;
          break;
        }
      } catch {}
    }

    const teamStats = {};
    if (standingsHtml) {
      const $ = cheerio.load(standingsHtml);
      function parseTable($table, mode) {
        $table.find('tr').each((_, tr) => {
          const tds = $(tr).find('td');
          if (tds.length < 8) return;
          const team = $(tds[1]).text().trim().replace(/\s+FC$/i, '').replace(/\s+CF$/i, '');
          if (!team) return;

          const w = parseInt($(tds[3]).text() || '0', 10);
          const d = parseInt($(tds[4]).text() || '0', 10);
          const l = parseInt($(tds[5]).text() || '0', 10);
          const gfgaText = ($(tds[6]).text() || '').trim();
          const [gfStr, gaStr] = gfgaText.split(':');
          const gf = parseInt(gfStr || '0', 10);
          const ga = parseInt(gaStr || '1', 10);

          if (!teamStats[team]) teamStats[team] = {};
          teamStats[team][mode] = { w, d, l, gf, ga };
        });
      }

      const tables = $('table.table-main');
      if (tables.length >= 3) {
        parseTable(tables.eq(0), 'total');
        parseTable(tables.eq(1), 'home');
        parseTable(tables.eq(2), 'away');
      }
    }

    // --- Build metrics ---
    const buildMetricsForFixture = (home, away) => {
      const lookup = {};
      Object.keys(teamStats).forEach(t => lookup[t.toLowerCase()] = t);

      const hKey = lookup[home.toLowerCase()];
      const aKey = lookup[away.toLowerCase()];
      if (!hKey || !aKey) return { match: `${home} vs ${away}` };

      const h = teamStats[hKey];
      const a = teamStats[aKey];

      const totalH = h.total || { w:0,d:0,l:0,gf:0,ga:0 };
      const totalA = a.total || { w:0,d:0,l:0,gf:0,ga:0 };
      const homeH  = h.home  || { w:0,d:0,l:0,gf:0,ga:0 };
      const awayA  = a.away  || { w:0,d:0,l:0,gf:0,ga:0 };

      const goalRatio = `${totalH.gf}/${Math.max(1,totalH.ga)} - ${totalA.gf}/${Math.max(1,totalA.ga)}`;
      const wdlRatio = `${totalH.w}${totalH.d}${totalH.l} - ${totalA.w}${totalA.d}${totalA.l}`;
      const haRecord = `${homeH.w}${homeH.d}${homeH.l} - ${awayA.w}${awayA.d}${awayA.l}`;

      return {
        match: `${hKey} vs ${aKey}`,
        goal_ratio: goalRatio,
        wdl_ratio: wdlRatio,
        ha_record: haRecord
      };
    };

    const enriched = fixtures.map(f => buildMetricsForFixture(f.home,f.away)).filter(Boolean);

    res.status(200).json({ league: `${country}/${league}`, count: enriched.length, fixtures: enriched });

  } catch(err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to fetch', details: err.message });
  }
}
